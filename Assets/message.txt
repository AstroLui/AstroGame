Juego de adivinanzas  como se haria este
Mostrar versiones





















## Juego de adivinanzas en Assembly:
Descripción:
El juego de adivinanzas consiste en que el usuario debe adivinar un número secreto dentro de un rango específico. El programa le dará pistas al usuario indicando si su suposición es mayor, menor o igual al número secreto.

Implementación:
1. Definir variables:

Fragmento de código

Explain
; Definimos las variables
secretNumber: db 42 ; Número secreto
guess: db 0 ; Adivinanza del usuario
attempts: db 0 ; Número de intentos

; Definimos el rango de adivinanzas
minNumber: db 1 ; Mínimo valor
maxNumber: db 100 ; Máximo valor
Usa el código con precaución.
2. Generar número secreto:

Fragmento de código

Explain
; Generamos un número aleatorio entre minNumber y maxNumber
mov ax, @data ; Cargamos la dirección de la sección de datos
mov bx, maxNumber ; Cargamos el valor máximo
mov cx, minNumber ; Cargamos el valor mínimo

mov dx, 0 ; Inicializamos el acumulador

again:
  inc dx ; Incrementamos el acumulador
  loop again ; Repetimos hasta que dx sea mayor o igual que bx

mov secretNumber, dx ; Asignamos el valor aleatorio a la variable secretNumber
Usa el código con precaución.
3. Bucle principal:

Fragmento de código

Explain
start:
  mov attempts, 0 ; Reiniciamos el número de intentos

moreAttempts:
  mov ah, 2 ; Función de entrada (leer un número)
  int 21h ; Ejecutamos la función

  mov guess, al ; Guardamos la adivinanza en la variable guess

  ; Comparamos la adivinanza con el número secreto
  cmp guess, secretNumber
  jne checkGuess ; Si no son iguales, saltamos a checkGuess

  ; El usuario adivinó el número
  mov ah, 9 ; Función de salida (mostrar un mensaje)
  mov dx, msgWin ; Dirección del mensaje de victoria
  int 21h ; Ejecutamos la función

  jmp endGame ; Salimos del bucle principal

checkGuess:
  inc attempts ; Incrementamos el número de intentos

  cmp attempts, 5 ; Comparamos el número de intentos con 5
  jge gameOver ; Si el número de intentos es mayor o igual a 5, saltamos a gameOver

  ; Damos pistas al usuario
  cmp guess, secretNumber
  jl tooLow ; Si la adivinanza es menor, saltamos a tooLow
  jg tooHigh ; Si la adivinanza es mayor, saltamos a tooHigh

  ; La adivinanza es correcta
  mov ah, 9 ; Función de salida (mostrar un mensaje)
  mov dx, msgCorrect ; Dirección del mensaje de adivinanza correcta
  int 21h ; Ejecutamos la función

  jmp moreAttempts ; Volvemos al inicio del bucle principal

tooLow:
  mov ah, 9 ; Función de salida (mostrar un mensaje)
  mov dx, msgTooLow ; Dirección del mensaje de "demasiado bajo"
  int 21h ; Ejecutamos la función

  jmp moreAttempts ; Volvemos al inicio del bucle principal

tooHigh:
  mov ah, 9 ; Función de salida (mostrar un mensaje)
  mov dx, msgTooHigh ; Dirección del mensaje de "demasiado alto"
  int 21h ; Ejecutamos la función

  jmp moreAttempts ; Volvemos al inicio del bucle principal

gameOver:
  mov ah, 9 ; Función de salida (mostrar un mensaje)
  mov dx, msgGameOver ; Dirección del mensaje de "fin del juego"
  int 21h ; Ejecutamos la función

endGame:
  ; Salimos del programa
  mov ah, 4ch
  int 21h
Usa el código con precaución.
4. Secciones de datos:

Fragmento de código
msgWin: db "Has adivinado el número secreto!", 10, 0
msgCorrect: db "Tu última adivinanza es correcta!", 10, 0
msgTooLow: db "Tu última adivinanza es demasiado baja.", 10, 0
msgTooHigh: db "Tu última adivinanza es demasiado alta.", 10, 0
msgGameOver: db "Has perdido. El número secreto era: ", 10, 0